{"version":3,"sources":["logo.svg","VideoPlayer.js","Utils.js","App.js","reportWebVitals.js","index.js"],"names":["VideoPlayer","props","state","currentIndex","nextVideo","bind","this","setState","st","newIndex","urls","length","index","className","url","controls","playing","config","youtube","autoplay","modestbranding","onClick","Component","shuffle","array","temporaryValue","randomIndex","Math","floor","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,I,6FCsDAA,E,kDAhDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,aAAc,GAElB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBALH,E,6CASlB,WAAa,IAAD,OACR,OAAOC,KAAKC,UAAS,SAAAC,GACjB,IAAIC,EAAWD,EAAGL,aAMlB,OALGM,GAAY,EAAKR,MAAMS,KAAKC,OAAS,EACpCF,EAAW,EAEXA,GAAsB,EAEnB,CACHN,aAAcM,Q,oBAK1B,WACI,IAAMC,EAAOJ,KAAKL,MAAMS,KAEpBE,EAAQN,KAAKJ,MAAMC,aAEvB,OACI,sBAAKU,UAAU,cAAf,UACI,cAAC,IAAD,CACIA,UAAU,eACVC,IAAKJ,EAAKE,GACVG,UAAU,EACVC,SAAS,EACTC,OAAQ,CACJC,QAAS,CACLC,SAAU,EACVC,eAAgB,MAI5B,wBAAQC,QAASf,KAAKF,UAAtB,mD,GA3CUkB,aCcTC,MAnBjB,SAAiBC,GAIb,IAHA,IAAiCC,EAAgBC,EAA7CvB,EAAeqB,EAAMb,OAGlB,IAAMR,GAGXuB,EAAcC,KAAKC,MAAMD,KAAKE,SAAW1B,GAIzCsB,EAAiBD,EAHjBrB,GAAgB,GAIhBqB,EAAMrB,GAAgBqB,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,GCiBIM,MA5Bf,WACE,IAAMpB,EAAO,CACX,+BACA,+BACA,+BACA,gCAKF,OAFAa,EAAQb,GAGN,sBAAKG,UAAU,MAAf,UACE,sBAAKA,UAAU,cAAf,UACE,8CACA,6DAEF,cAAC,EAAD,CAAaH,KAAMA,IACnB,mCACE,4BAAG,sDAA8B,uBACjC,kHACA,yPCbOqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.98745896.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { render } from \"@testing-library/react\";\r\nimport React, {Component} from \"react\";\r\nimport ReactPlayer from 'react-player/youtube'\r\nimport \"./VideoPlayer.css\"\r\n\r\nclass VideoPlayer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentIndex: 0\r\n        }\r\n        this.nextVideo = this.nextVideo.bind(this);\r\n\r\n    }\r\n\r\n    nextVideo() {\r\n        return this.setState(st => {\r\n            let newIndex = st.currentIndex;\r\n            if(newIndex >= this.props.urls.length - 1){\r\n                newIndex = 0;\r\n            } else {\r\n                newIndex = newIndex + 1;\r\n            }\r\n            return {\r\n                currentIndex: newIndex\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const urls = this.props.urls;\r\n        //const _currUrl = this.nextVideo(null) // no video played yet.\r\n        let index = this.state.currentIndex;\r\n        \r\n        return(\r\n            <div className=\"VideoPlayer\">\r\n                <ReactPlayer\r\n                    className=\"react-player\"\r\n                    url={urls[index]}\r\n                    controls={false}\r\n                    playing={true}\r\n                    config={{\r\n                        youtube: {\r\n                            autoplay: 1,\r\n                            modestbranding: 1\r\n                        }\r\n                    }}\r\n                />\r\n                <button onClick={this.nextVideo}>next (random) gibberish &#x2192;</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VideoPlayer;\r\n","function shuffle(array) {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n  \r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n  \r\n    return array;\r\n  }\r\n\r\n  export default shuffle;","import logo from './logo.svg';\nimport './App.css';\nimport VideoPlayer from './VideoPlayer'\nimport shuffle from './Utils';\n\nfunction App() {\n  const urls = [\n    \"https://youtu.be/gNf8Bsu0UYc\",\n    \"https://youtu.be/btMC9wE2AXg\",\n    \"https://youtu.be/wnHpqdiaKYs\",\n    \"https://youtu.be/ywSlCcEghMg\"\n  ];\n\n  shuffle(urls);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__Header\">\n        <h1>Gibberish.TV</h1>\n        <h2>Unwind an exhausted mind</h2>\n      </div>\n      <VideoPlayer urls={urls} />\n      <footer> \n        <p><b>about gibberish.tv:</b></p><br />\n        <p>there is a lot of mindfulness content out there - and no denying its helpfulness.</p>\n        <p>We found personally that best paired with mindfulness, is gibberish. content so random, \n          so passionate, so interesting, so unuseful (yet surprisingly useful), that it can't help\n          but bring you back into reality.</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}